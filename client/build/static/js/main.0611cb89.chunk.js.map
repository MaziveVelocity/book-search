{"version":3,"sources":["utils/auth.js","utils/mutations.js","pages/SearchBooks.js","utils/localStorage.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","JSON","parse","savedBookIds","useMutation","saveBook","error","useEffect","bookIdArr","length","stringify","handleFormSubmit","event","a","preventDefault","fetch","response","Error","json","items","bookData","map","book","bookId","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","savedBookId","onClick","GET_ME","SavedBooks","userData","setUserData","userDataLength","Object","keys","removeBook","useQuery","loading","data","getUserData","user","reload","handleDeleteBook","updatedUser","me","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0611cb89.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($email: String!, $password: String!) {\r\n        login(email: $email, password: $password) {\r\n        token\r\n        user {\r\n            _id\r\n            username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($email: String!, $password: String!, $username: String!) {\r\n        addUser(email: $email, password: $password, username: $username) {\r\n        token\r\n        user {\r\n            _id\r\n            username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n    mutation saveBook($book: BookInput) {\r\n        saveBook(input: $book) {\r\n            _id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n    mutation removeBook($bookId: ID!) {\r\n        removeBook(bookId: $bookId) {\r\n            _id\r\n            username\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { SAVE_BOOK } from '../utils/mutations';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds({ savedBookIds });\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await saveBook({ variables: { book: bookToSave } });\r\n      // window.location.reload();\r\n\r\n      if (!response) {\r\n        throw new Error('something went wrong!')\r\n      }\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      // setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch('/api/users/me', {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch('/api/users', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch('/api/users/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch('/api/users', {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_ME = gql`\r\n    {\r\n        me{\r\n            _id\r\n            username\r\n            email\r\n            bookCount\r\n            savedBooks {\r\n                bookId\r\n                authors\r\n                description\r\n                title\r\n                image\r\n                link\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\n// import { getMe, deleteBook } from '../utils/API';\r\nimport Auth from '../utils/auth';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\nimport { GET_ME } from '../utils/queries';\r\n\r\n\r\nconst SavedBooks = () => {\r\n  const [userData, setUserData] = useState({});\r\n\r\n  // use this to determine if `useEffect()` hook needs to run again\r\n  const userDataLength = Object.keys(userData).length;\r\n\r\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\r\n  const { loading, data } = useQuery(GET_ME)\r\n\r\n  useEffect(() => {\r\n    const getUserData = async () => {\r\n      try {\r\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n        if (!token) {\r\n          return false;\r\n        }\r\n\r\n        const response = data;\r\n        if (!response) {\r\n          throw new Error('something went wrong!');\r\n        }\r\n\r\n        const user = await response;\r\n        setUserData(user);\r\n        window.location.reload()\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    getUserData();\r\n  }, [userDataLength]);\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n\r\n      const response = await removeBook({variables: { bookId: bookId }});\r\n      window.location.reload();\r\n\r\n      if (!response) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const updatedUser = await response.json();\r\n      setUserData(updatedUser);\r\n      // upon success, remove book's id from localStorage\r\n\r\n    } catch (err) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {data.me.savedBooks.length\r\n            ? `Viewing ${data.me.savedBooks.length} saved ${data.me.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {data.me.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const response = await addUser({variables: {...userFormData}});\r\n\r\n      if (!response) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { token, user } = await response.data;\r\n      Auth.login(token);\r\n\r\n    } catch (err) {\r\n      console.error(error);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Auth from '../utils/auth';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [login, { error }] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const response = await login({variables: {...userFormData}});\r\n      \r\n      if (!response) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { token, user } = await response.data.login;\r\n      Auth.login(token);\r\n\r\n    } catch (err) {\r\n      console.error(error);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport ApolloClient from 'apollo-boost';\r\n\r\nconst client = new ApolloClient({\r\n  request: operation => {\r\n    const token = localStorage.getItem('id_token');\r\n\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : ''\r\n      }\r\n    });\r\n  },\r\n  uri: '/graphql'\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path='/' component={SearchBooks} />\r\n            <Route exact path='/saved' component={SavedBooks} />\r\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\r\n          </Switch>\r\n        </>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}